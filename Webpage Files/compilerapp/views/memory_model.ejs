<!DOCTYPE html>
<html>
	<head>
		<title> <%= title %> </title>
		<link href="/stylesheets/pageStyle.css" type="text/css" rel="stylesheet" /> 
        <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.12.0/jquery.min.js"></script>
         <!-- Latest compiled and minified CSS -->
        <link rel="stylesheet" href="http://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css">
        <!-- Latest compiled JavaScript -->
        <script src="http://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/js/bootstrap.min.js"></script>
    	<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
        <style>
        canvas {
            position: relative;
            border:1px solid #d3d3d3;
            style="z-index: 5;
        }
        </style>
    </head>
    
<body>
  <!-- Website Title and Navigation Bar -->
  <div class="row"><br>
    <div class = "col-lg-12 top text-center">
        <font size="6" color=navy face="fantasy">Progamming Tree Foundations</font><br>
        <div class="btn-group">
          <a href="/"><button type="button" class="btn btn-primary">Home</button></a>
          <a href="/lessons"><button type="button" class="btn btn-info">Lessons</button></a>
          <a href="/signup"><button type="button" class="btn btn-warning">Register</button></a>
          <a href="/login"><button type="button" class="btn btn-success">Login</button></a>
      </div>
    </div>
  </div> 
<!-- Programming Tree Interface Panel -->
    
<!-- Content Itself, opens when user clicks something.-->
<div class="row">
    <div class="col-lg-6">
        <div class = "game" onload="startGame()">
        <canvas id="myCanvas" width="600" height="463" style="border:1px solid #000000;">
        </canvas>
        <script>


        var background;
        var S1;
        var S2;
        var S3;
        var H1;
        var H2;
        var H3;
        var B;
        var C;

        var clickedd = false;
        var bool = false;
        var cur = "none";
        var done = false;

        var s1 = new Image();
        var s2 = new Image();
        var s3 = new Image();
        var h1 = new Image();
        var h2 = new Image();
        var h3 = new Image();
        var c = new Image();
        var back = new Image();

        s1.src = "img/FA.png";
        s2.src = "img/LV.png";
        s3.src = "img/SL.png";
        h1.src = "img/GV.png";
        h2.src = "img/SM.png";
        h3.src = "img/VR.png";
        c.src = "img/Yes.png";
        back.src = "img/SvH.jpg";

        function startGame() {
            
            S1 = new component(80, 60, s1.src, 50, 370, "image");
            S2 = new component(80, 60, s2.src, 130, 370, "image");
            S3 = new component(80, 60, s3.src, 210, 370, "image");
            H1 = new component(80, 60, h1.src, 290, 370, "image");
            H2 = new component(80, 60, h2.src, 370, 370, "image");
            H3 = new component(80, 60, h3.src, 450, 370, "image");

            C = new component(200, 200, c.src, 200, 150, "image");
            B = new stack(150, 140, 28, 138);

            background = new component(600, 463, back.src, 0, 0, "image");

            myGameArea.start();
        }

        var myGameArea = {
            canvas : document.createElement("canvas"),
            start : function() {
                this.canvas.width = 600;
                this.canvas.height = 463;
                this.context = this.canvas.getContext("2d");
                document.body.insertBefore(this.canvas, document.body.childNodes[0]);
                this.interval = setInterval(updateGameArea, 20);
                window.addEventListener("mousedown", function (e) {
                    myGameArea.x = e.pageX;
                    myGameArea.y = e.pageY;
                    if (clickedd == false && (S1.clicked() || S2.clicked() || S3.clicked() || H1.clicked() || H2.clicked() || H3.clicked())){
                        clickedd = true;
                        if (S1.clicked()){
                            cur = "1";
                        } else if (S2.clicked()){
                            cur = "2";
                        } else if (S3.clicked()){
                            cur = "3";
                        } else if (H1.clicked()){
                            cur = "4";
                        } else if (H2.clicked()){
                            cur = "5";
                        } else if (H3.clicked()){
                            cur = "6";
                        } 
                    } else if (bool == true){
                        clickedd = false;
                        cur = "none";
                    }
                    
                })

            }, 
            clear : function(){
                this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);
            }
        }
        function component(width, height, color, x, y, type) {
            this.type = type;
            if (type == "image") {
                this.image = new Image();
                this.image.src = color;
            }
            this.width = width;
            this.height = height;
            this.speedX = 0;
            this.speedY = 0;    
            this.x = x;
            this.y = y;
            this.point = false;
            this.update = function() {
                ctx = myGameArea.context;
                if (type == "image") {
                    ctx.drawImage(this.image, 
                    this.x, 
                    this.y,
                    this.width, this.height);
                } else {
                    ctx.fillStyle = color;
                    ctx.fillRect(this.x, this.y, this.width, this.height);
                }
            }
            this.clicked = function() {
                var myleft = this.x;
                var myright = this.x + (this.width);
                var mytop = this.y;
                var mybottom = this.y + (this.height);
                var clicked = true;
                if ((mybottom < myGameArea.y) || (mytop > myGameArea.y)
                 || (myright < myGameArea.x) || (myleft > myGameArea.x)) {
                    clicked = false;
                }
                return clicked;
            }
        }

        function stack(width, height, x, y) {
            this.width = width;
            this.height = height;   
            this.x = x;
            this.y = y;
            this.update = function() {
                ctx = myGameArea.context;
                ctx.fillStyle = "red";
                ctx.fillRect(this.x, this.y, this.width, this.height);
                ctx.fillStyle = "blue";
                ctx.fillRect(this.x + 395, this.y, this.width, this.height);
                if (this.x - 10 < S1.x && 
                    this.x - 10 < S2.x &&
                    this.x - 10 < S3.x && 
                    this.x + this.width - 10 > S1.x &&
                    this.x + this.width - 10 > S2.x &&
                    this.x + this.width - 10 > S3.x &&
                    this.y - 10 < S1.y &&
                    this.y - 10 < S2.y &&
                    this.y - 10 < S3.y &&
                    this.y - 10 < H1.y &&
                    this.y - 10 < H2.y &&
                    this.y - 10 < H3.y &&
                    this.y + this.height - 10 > S1.y &&
                    this.y + this.height - 10 > S2.y &&
                    this.y + this.height - 10 > S3.y &&
                    this.y + this.height - 10 > H1.y &&
                    this.y + this.height - 10 > H2.y &&
                    this.y + this.height - 10 > H3.y && cur == "none") {

                    done = true;
                }
            }
        }

        function updateGameArea() {
            myGameArea.clear();
            if (bool == false && clickedd) {
                window.addEventListener("mousemove", function (e) {
                    myGameArea.x = e.pageX;
                    myGameArea.y = e.pageY;
                    })
                bool = true;
            }
            if (bool && clickedd){
                if (cur == "1") {
                    S1.x = myGameArea.x - 50;
                    S1.y = myGameArea.y - 50;           
                } else if (cur == "2"){
                    S2.x = myGameArea.x - 50;
                    S2.y = myGameArea.y - 50;            
                } else if (cur == "3"){
                    S3.x = myGameArea.x - 50;
                    S3.y = myGameArea.y - 50;            
                } else if (cur == "4"){
                    H1.x = myGameArea.x - 50;
                    H1.y = myGameArea.y - 50;            
                } else if (cur == "5"){
                    H2.x = myGameArea.x - 50;
                    H2.y = myGameArea.y - 50;            
                } else if (cur == "6"){
                    H3.x = myGameArea.x - 50;
                    H3.y = myGameArea.y - 50;            
                }
            }
            background.update();
            B.update();
            S1.update();
            S2.update();
            S3.update();
            H1.update();
            H2.update();
            H3.update();

            if (done == true)  {
                C.update();
                setTimeout(function(){
                    location.reload();
                },3000);
            }
        }

        </script>
                        <!-- -->
        </div><!--end of game -->
    </div><!-- End of game column-->

    <div class="col-lg-6">
        <div class = "main">
            <center>

            <h1>Memory Model in the Virtual Address Space</h1>
            
            <p>Every programmer know that there are two key separations when it comes to the computer and operating systems. There is the hardware, which is the physical representation of the computer and OS where instructions are stored and executed; and which its internal memory can be accessed by processes. There is also the virtual address space, where for each process or thread run, the variables and functions called in the process are allocated in a separate space from physical hardware. Consider the diagram below.</p>
            
            <img src="http://i240.photobucket.com/albums/ff108/dwakira/memmodel_zpslmlxyenh.gif"><br><br>
            
            <p>Stack frames in memory that is set aside as space for a thread that is in execution. It reserves a block and stores information such as whenever a function is called, and stores any local variables defined at the top of the Stack address space. When a function returns the block becomes unused and can be used the next time a function is called.</p>
            
            <p>Heap on the other hand include global variables and stores new instances variables or classes allocated in memory. For example in Java, any data structure declared with the 'new' keyword is allocated onto the heap; whereas in C any variable declared with malloc() calls are stored.</p>
            
            <p>The diagram above is the staple virtual address memory design, where Stack is found on the top end of memory and the heap allocated on bottom portion of memory. In order for the different memory allocations and free of certain variables in memory to not interfere with each other heap and stack allocations are differentiated on opposite sides of the memory model.</p>
            
            <p>The stack allocates memory in a LIFO order while the heap does not have any forced allocation and deallocation pattern. This layout ensures that the programmer does not need to be concerned on how much size each process or variables would take in memory (e.g. int is 4 bytes, Person class is 24 bytes, etc) and need to take the tedious process of choosing where in the memory model to allocate each and every process in the address space.</p>
            
            </center>
        </div><!-- End of Main-->
    </div><!-- End of main column-->
    <!-- Section for where the game should go -->  
</div>
<div class="row">
    <div class="col-lg-12">
        <div class = "exercise">
            <center>
                <h1>Exercise</h1>
            </center>
        </div>
    </div>
</div>
</body>
    
     
</html>
